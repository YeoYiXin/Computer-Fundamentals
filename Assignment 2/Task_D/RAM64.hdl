// This file is adapted from part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.

/**
 * Memory of 64 registers, each 8 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[8], load, address[6];
    OUT out[8];

    PARTS:
	//Since RAM64 is memory which is 8-bits wide, we need to connect 8 RAM8
	//To build RAM64, we need DMux and Mux which are 8 bits wide
	//With this, I can use the chip I build in Task B which is 
	//DMux8Way and use load as input, and address[0..2] as sel
	//which will then produce 8 outputs for the RAM8 which sel is address[3..5]
	//and after that, the outputs will go through multiplexor
	//which is Mux8Way8 with sel as address[6..8]

	//for DMux
	DMux8Way(in=load, sel=address[0..2], a=s1, b=s2, c=s3, d=s4, e=s5, f=s6, g=s7, h=s8);

	//connext 8 ram
	RAM8(in=in, load=s1, address=address[3..5], out=q1);
	RAM8(in=in, load=s2, address=address[3..5], out=q2);
	RAM8(in=in, load=s3, address=address[3..5], out=q3);
	RAM8(in=in, load=s4, address=address[3..5], out=q4);
	RAM8(in=in, load=s5, address=address[3..5], out=q5);
	RAM8(in=in, load=s6, address=address[3..5], out=q6);
	RAM8(in=in, load=s7, address=address[3..5], out=q7);
	RAM8(in=in, load=s8, address=address[3..5], out=q8);

	//for mux
	Mux8Way8(a=q1, b=q2, c=q3, d=q4, e=q5, f=q6, g=q7, h=q8, sel=address[0..2], out=out);

}