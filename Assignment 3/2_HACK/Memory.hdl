// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the computer's memory,
 * including RAM and memory mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: If load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output in the next time step.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	//use dmux to access and select one of 2 possible destination which is either RAM or Screen with based on selector of binary value of bit 13 and 14 in A-instruction . 
	DMux4Way(in=load, sel=address[13..14], a=r1, b=r2, c=screen, d=keyb);
    	
	//since selection from 0 and 1 from DMux4Way have same destination which will be the RAM so OR gate is used to get output and feed the output as load to ram16k
	Or(a=r1, b=r2, out=ram);
   	RAM16K(in=in, load=ram, address=address[0..13], out=out1);
    	
	//size of Screen memory does not necessary to use 14-bit address bus so 13-bit [0..12] is enough 
	Screen(in=in, load=screen, address=address[0..12], out=out2);
    	
	Keyboard(out=out3);
	
	//Select one output based on binary value of bit 13 and 14 
    	Mux4Way16(a=out1, b=out1, c=out2, d=out3, sel=address[13..14], out=out);
}
